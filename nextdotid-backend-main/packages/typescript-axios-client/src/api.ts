/* tslint:disable */
/* eslint-disable */
/**
 * nextdotid-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetPayloadDto
 */
export interface GetPayloadDto {
    /**
     * 
     * @type {string}
     * @memberof GetPayloadDto
     */
    'action': string;
    /**
     * 
     * @type {string}
     * @memberof GetPayloadDto
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof GetPayloadDto
     */
    'identity': string;
    /**
     * 
     * @type {string}
     * @memberof GetPayloadDto
     */
    'public_key': string;
}
/**
 * 
 * @export
 * @interface GetTwitterPayloadDto
 */
export interface GetTwitterPayloadDto {
    /**
     * 
     * @type {string}
     * @memberof GetTwitterPayloadDto
     */
    'privateKey': string;
    /**
     * 
     * @type {string}
     * @memberof GetTwitterPayloadDto
     */
    'action': string;
    /**
     * 
     * @type {string}
     * @memberof GetTwitterPayloadDto
     */
    'identity': string;
    /**
     * 
     * @type {string}
     * @memberof GetTwitterPayloadDto
     */
    'public_key': string;
}
/**
 * 
 * @export
 * @interface HealthCheck200Response
 */
export interface HealthCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck200Response
     */
    'info'?: { [key: string]: HealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck200Response
     */
    'error'?: { [key: string]: HealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck200Response
     */
    'details'?: { [key: string]: HealthCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HealthCheck200ResponseInfoValue
 */
export interface HealthCheck200ResponseInfoValue {
    [key: string]: string;

    /**
     * 
     * @type {string}
     * @memberof HealthCheck200ResponseInfoValue
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface HealthCheck503Response
 */
export interface HealthCheck503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck503Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck503Response
     */
    'info'?: { [key: string]: HealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck503Response
     */
    'error'?: { [key: string]: HealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthCheck200ResponseInfoValue; }}
     * @memberof HealthCheck503Response
     */
    'details'?: { [key: string]: HealthCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface VerifyProofDto
 */
export interface VerifyProofDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'action': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'identity': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'public_key': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'proof_location': string;
    /**
     * 
     * @type {object}
     * @memberof VerifyProofDto
     */
    'extra': object;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyProofDto
     */
    'created_at': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<HealthCheck200Response> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V1ProofApi - axios parameter creator
 * @export
 */
export const V1ProofApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} platform 
         * @param {string} identity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvatarStatus: async (platform: string, identity: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('checkAvatarStatus', 'platform', platform)
            // verify required parameter 'identity' is not null or undefined
            assertParamExists('checkAvatarStatus', 'identity', identity)
            const localVarPath = `/v1/proof`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (identity !== undefined) {
                localVarQueryParameter['identity'] = identity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyPair: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/proof/key-pair`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetPayloadDto} GetPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload: async (GetPayloadDto: GetPayloadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'GetPayloadDto' is not null or undefined
            assertParamExists('getPayload', 'GetPayloadDto', GetPayloadDto)
            const localVarPath = `/v1/proof/payload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(GetPayloadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetTwitterPayloadDto} GetTwitterPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwitterPayload: async (GetTwitterPayloadDto: GetTwitterPayloadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'GetTwitterPayloadDto' is not null or undefined
            assertParamExists('getTwitterPayload', 'GetTwitterPayloadDto', GetTwitterPayloadDto)
            const localVarPath = `/v1/proof/payload/twitter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(GetTwitterPayloadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyProofDto} VerifyProofDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyProof: async (VerifyProofDto: VerifyProofDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VerifyProofDto' is not null or undefined
            assertParamExists('verifyProof', 'VerifyProofDto', VerifyProofDto)
            const localVarPath = `/v1/proof`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(VerifyProofDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ProofApi - functional programming interface
 * @export
 */
export const V1ProofApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ProofApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} platform 
         * @param {string} identity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAvatarStatus(platform: string, identity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAvatarStatus(platform, identity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyPair(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeyPair(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetPayloadDto} GetPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayload(GetPayloadDto: GetPayloadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayload(GetPayloadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetTwitterPayloadDto} GetTwitterPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTwitterPayload(GetTwitterPayloadDto: GetTwitterPayloadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTwitterPayload(GetTwitterPayloadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyProofDto} VerifyProofDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyProof(VerifyProofDto: VerifyProofDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyProof(VerifyProofDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ProofApi - factory interface
 * @export
 */
export const V1ProofApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ProofApiFp(configuration)
    return {
        /**
         * 
         * @param {string} platform 
         * @param {string} identity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvatarStatus(platform: string, identity: string, options?: any): AxiosPromise<object> {
            return localVarFp.checkAvatarStatus(platform, identity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyPair(options?: any): AxiosPromise<void> {
            return localVarFp.getKeyPair(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetPayloadDto} GetPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload(GetPayloadDto: GetPayloadDto, options?: any): AxiosPromise<object> {
            return localVarFp.getPayload(GetPayloadDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetTwitterPayloadDto} GetTwitterPayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwitterPayload(GetTwitterPayloadDto: GetTwitterPayloadDto, options?: any): AxiosPromise<object> {
            return localVarFp.getTwitterPayload(GetTwitterPayloadDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyProofDto} VerifyProofDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyProof(VerifyProofDto: VerifyProofDto, options?: any): AxiosPromise<object> {
            return localVarFp.verifyProof(VerifyProofDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ProofApi - object-oriented interface
 * @export
 * @class V1ProofApi
 * @extends {BaseAPI}
 */
export class V1ProofApi extends BaseAPI {
    /**
     * 
     * @param {string} platform 
     * @param {string} identity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProofApi
     */
    public checkAvatarStatus(platform: string, identity: string, options?: AxiosRequestConfig) {
        return V1ProofApiFp(this.configuration).checkAvatarStatus(platform, identity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProofApi
     */
    public getKeyPair(options?: AxiosRequestConfig) {
        return V1ProofApiFp(this.configuration).getKeyPair(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetPayloadDto} GetPayloadDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProofApi
     */
    public getPayload(GetPayloadDto: GetPayloadDto, options?: AxiosRequestConfig) {
        return V1ProofApiFp(this.configuration).getPayload(GetPayloadDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetTwitterPayloadDto} GetTwitterPayloadDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProofApi
     */
    public getTwitterPayload(GetTwitterPayloadDto: GetTwitterPayloadDto, options?: AxiosRequestConfig) {
        return V1ProofApiFp(this.configuration).getTwitterPayload(GetTwitterPayloadDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyProofDto} VerifyProofDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProofApi
     */
    public verifyProof(VerifyProofDto: VerifyProofDto, options?: AxiosRequestConfig) {
        return V1ProofApiFp(this.configuration).verifyProof(VerifyProofDto, options).then((request) => request(this.axios, this.basePath));
    }
}



